# Huge List Of PowerShell Commands for Active Directory, Office 365 and more
# By Robert Allen | January 13, 2019 | 4 

# Active Directory PowerShell Commands

View all Active Directory commands:
get-command -Module ActiveDirectory

Display Basic Domain Information:
Get-ADDomain

Get all Domain Controllers by Hostname and Operating System:
Get-ADDomainController -filter * | select hostname, operatingsystem

Get all Fine Grained Password Policies:
Get-ADFineGrainedPasswordPolicy -filter *

Get Domain Default Password Policy:
Get-ADDefaultDomainPasswordPolicy

Backup Active Directory System State Remotely:
invoke-command -ComputerName DC-Name -scriptblock {wbadmin start systemstateback up -backupTarget:"Backup-Path" -quiet}

#AD User PowerShell Commands

Get User and List All Properties:
Get-ADUser username -Properties *

Get User and List Specific Properties:
Get-ADUser username -Properties * | Select name, department, title

Get All Active Directory Users in Domain:
Get-ADUser -Filter *

Get All Users From a Specific OU:
Get-ADUser -SearchBase “OU=ADPRO Users,dc=ad,dc=activedirectorypro.com” -Filter *

Get AD Users by Name:
get-Aduser -Filter {name -like "*robert*"}

Get All Disabled User Accounts:
Search-ADAccount -AccountDisabled | select name

Disable User Account:
Disable-ADAccount -Identity rallen

Enable User Account:
Enable-ADAccount -Identity rallen

Get All Accounts with Password Set to Never Expire:
get-aduser -filter * -properties Name, PasswordNeverExpires | where {$_.passwordNeverExpires -eq "true" } | Select-Object DistinguishedName,Name,Enabled

Find All Locked User Accounts:
Search-ADAccount -LockedOut

Unlock User Account:
Unlock-ADAccount –Identity john.smith

List all Disabled User Accounts:
Search-ADAccount -AccountDisabled

Force Password Change at Next Login:
Set-ADUser -Identity username -ChangePasswordAtLogon $true

Move a Single User to a New OU - You will need the distinguishedName of the user and the target OU:
Move-ADObject -Identity "CN=Test User (0001),OU=ADPRO Users,DC=ad,DC=activedirectorypro,DC=com" -TargetPath "OU=HR,OU=ADPRO Users,DC=ad,DC=activedirectorypro,DC=com"

Move Users to an OU from a CSV:
Setup a csv with a name field and a list of the users sAmAccountNames. Then just change the target OU path.
# Specify target OU. $TargetOU = "OU=HR,OU=ADPRO Users,DC=ad,DC=activedirectorypro,DC=com" # Read user sAMAccountNames from csv file (field labeled "Name"). Import-Csv -Path Users.csv | ForEach-Object { # Retrieve DN of User. $UserDN = (Get-ADUser -Identity $_.Name).distinguishedName # Move user to target OU. Move-ADObject -Identity $UserDN -TargetPath $TargetOU }

# AD Group Commands

Get All members Of A Security group:
Get-ADGroupMember -identity “HR Full”

Get All Security Groups in the Domain:
Get-ADGroup -filter *

Add User to Group:
Add-ADGroupMember -Identity group-name -Members Sser1, user2

Export Users From a Group:
Get-ADGroupMember -identity “Group-name” | select name | Export-csv -path C:OutputGroupmembers.csv -NoTypeInformation

Get Group by keyword:
get-adgroup -filter * | Where-Object {$_.name -like "*group-name*"}

Import a List of Users to a Group:
$members = Import-CSV c:itadd-to-group.csv | Select-Object -ExpandProperty samaccountname Add-ADGroupMember -Identity hr-n-drive-rw -Members $members

#AD Computer Commands

Get All Computers:
Get-AdComputer -filter *

Get All Computers by Host Name:
Get-ADComputer -filter * | select name

Get All Computers from an OU:
Get-ADComputer -SearchBase "OU=DN" -Filter *

Get a Count of All Computers in Domain:
Get-ADComputer -filter * | measure

Get all Windows 10 Computers:
Get-ADComputer -filter {OperatingSystem -Like '*Windows 10*'} -property * | select name, operatingsystem

Get a Count of All computers by Operating System:
Get-ADComputer -Filter "name -like '*'" -Properties operatingSystem | group -Property operatingSystem | Select Name,Count

Delete a single Computer:
Remove-ADComputer -Identity "USER04-SRV4"

Delete a List of Computer Accounts:
Get-Content -Path C:ComputerList.txt | Remove-ADComputer

Delete Computers From an OU:
Get-ADComputer -SearchBase "OU=DN" -Filter * | Remote-ADComputer

#Group Policy Commands

Get all GPO related commands:
get-command -Module grouppolicy

Get all GPOs by status:
get-GPO -all | select DisplayName, gpostatus

Backup all GPOs in the Domain:
Backup-Gpo -All -Path E:GPObackup

#Office 365 PowerShell Commands

Connect To Exchange Online:
$UserCredential = Get-Credential $Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.outlook.com/powershell/ -Credential $LiveCred -Authentication Basic -AllowRedirection Import-PSSession $Session

Force Azure Sync (run this on the Azure AD Connect server):
Force delta sync (only sync changes)
Start-ADSyncSyncCycle -PolicyType Delta 

Force a full sync:
Start-ADSyncSyncCycle -PolicyType Initial

Get A List of All Office 365 Users:
Get-MsolUser | Select DisplayName, City, Department, ObjectID

Get Full mailbox details:
Get-Mailbox email-address | fl

Get Calendar Permissions:
Get-MailboxFolderPermission username:calendar

Enable Remote Mailbox (Hybrid Environment):
Use this command if you have an existing on-premise user that needs an office 365 mailbox. There are other ways to do this but this creates all the attributes in the AD account.
Enable-RemoteMailbox username -RemoteRoutingAddress "username@tenant.mail.onmicrosoft.com"

#Windows Server & Client Commands

Get all Services:
get-service

Get all Processes:
get-process

Display Network Adapters:
get-netadapter

Restart Remote Computers:
Restart-Computer -ComputerName "Server01", "Server02", "localhost"

Get Last Boot Time:
$os = Get-WmiObject win32_operatingsystem $uptime = (Get-Date) - $os.ConvertToDateTime($os.LastBootUpTime) Write-Output ("Last boot: " + $os.ConvertToDateTime($os.LastBootUpTime))

You can also run this single line to get last boot time:
systeminfo | more

Start a Remote Session:
Enter-PSSession -ComputerName

Read the Content of a File (Open a file):
Get-Content -Path "c:\windows\system32\logfiles\firewall\firewall.log"

Copy Files & Folders:
copy-item E:\WindowsImageBackup\exchange -destination \\server1\Backups\Exchange -recurse -verbose

#Basic PowerShell Commands

Get Execution Policy:
get-executionpolicy

Set Execution Policy to Unrestricted:
set-executionpolicy unrestricted

Show PowerShell Version:
$PSVersionTable

Get help for a command:
get-help command-name

Search Get Help:
get-help *keyword*

Get Installed Modules:
get-installedmodule

List All Available Modules:
Get-Module -ListAvailable

Exporting results to CSV:
Add export-csv to the end of commands
Get-ADUser username -Properties * | Select name, department, title | export-csv c:user.csv

Display available commands:
get-command

Find New Modules:
Replace *ntfs* with the keyword you want to search for. This searches modules at https://www.powershellgallery.com/
Find-Module *ntfs*

Install a New Module:
Installs modules from https://www.powershellgallery.com/
install-module NTFSSecurity